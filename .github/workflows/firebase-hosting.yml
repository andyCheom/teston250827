# Firebase Hosting CI/CD Pipeline
name: Firebase Hosting Deploy

# 트리거 조건
on:
  # Pull Request에 대한 프리뷰 배포
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'public/**'
      - 'firebase.json'
      - '.github/workflows/firebase-hosting.yml'
  
  # 브랜치 푸시 시 배포
  push:
    branches:
      - main      # 프로덕션 배포
      - develop   # 스테이징 배포
    paths:
      - 'public/**'
      - 'firebase.json'
      - '.github/workflows/firebase-hosting.yml'
  
  # 수동 실행
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# 환경 변수 (동적으로 로드됨)
env:
  NODE_VERSION: '18'

jobs:
  # 빌드 및 검증
  build:
    name: Build and Validate
    runs-on: ubuntu-latest
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # 2. 환경변수 로드
      - name: Load environment variables from .env
        run: |
          if [ -f .env ]; then
            echo "📄 .env 파일에서 환경변수 로드 중..."
            
            # .env 파일에서 환경변수 로드 (주석과 빈 줄 제외)
            export $(grep -v '^#' .env | grep -v '^$' | xargs)
            
            # GitHub Actions 환경변수로 설정
            echo "PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV
            echo "FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT_EMAIL=${SERVICE_ACCOUNT_EMAIL}" >> $GITHUB_ENV
            
            echo "✅ Firebase 환경변수 로드 완료:"
            echo "  FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID}"
          else
            echo "❌ .env 파일을 찾을 수 없습니다"
            exit 1
          fi
      
      # 3. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # 4. 의존성 설치 (public 디렉토리에서)
      - name: Install dependencies
        run: |
          if [ -f "public/package.json" ]; then
            cd public
            npm ci
          else
            echo "⚠️ public/package.json not found, skipping npm install"
          fi
      
      # 5. 프로젝트 빌드
      - name: Build project
        run: |
          if [ -f "public/package.json" ]; then
            cd public
            npm run build || echo "⚠️ No build script found"
          else
            echo "✅ Static files ready for deployment"
          fi
      
      # 6. Firebase 설정 검증
      - name: Validate Firebase configuration
        run: |
          echo "🔍 Firebase 설정 검증 중..."
          
          # firebase.json 존재 확인
          if [ ! -f "firebase.json" ]; then
            echo "❌ firebase.json이 존재하지 않습니다."
            exit 1
          fi
          
          # public 디렉토리 확인
          if [ ! -d "public" ]; then
            echo "❌ public 디렉토리가 존재하지 않습니다."
            exit 1
          fi
          
          # index.html 확인
          if [ ! -f "public/index.html" ]; then
            echo "❌ public/index.html이 존재하지 않습니다."
            exit 1
          fi
          
          echo "✅ Firebase 설정 검증 완료"
      
      # 7. 빌드 아티팩트 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firebase-build-${{ github.sha }}
          path: public/
          retention-days: 1

  # Pull Request용 프리뷰 배포
  preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Load environment variables from .env
        run: |
          if [ -f .env ]; then
            export $(grep -v '^#' .env | grep -v '^$' | xargs)
            echo "FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}" >> $GITHUB_ENV
          fi
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: firebase-build-${{ github.sha }}
          path: public/
      
      - name: Deploy to Firebase Hosting Preview
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SA_KEY }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: preview-${{ github.event.number }}
          expires: 7d
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

  # 스테이징 배포 (develop 브랜치)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging--${{ env.FIREBASE_PROJECT_ID }}.web.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Load environment variables from .env
        run: |
          if [ -f .env ]; then
            export $(grep -v '^#' .env | grep -v '^$' | xargs)
            echo "FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}" >> $GITHUB_ENV
          fi
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: firebase-build-${{ github.sha }}
          path: public/
      
      # 스테이징 환경 설정 업데이트
      - name: Update Firebase config for staging
        run: |
          echo "🔧 스테이징 환경 설정 적용 중..."
          
          # firebase.json에서 서비스 ID를 현재 프로젝트의 서비스로 변경
          STAGING_SERVICE_ID="${PROJECT_ID}-graphrag-api"
          sed -i "s/__BACKEND_SERVICE_ID__/${STAGING_SERVICE_ID}/" firebase.json
          
          echo "✅ 스테이징 설정 완료: ${STAGING_SERVICE_ID}"
      
      - name: Deploy to Firebase Hosting Staging
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SA_KEY }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: staging
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
      
      # 스테이징 배포 후 헬스 체크
      - name: Health check staging
        run: |
          echo "🏥 스테이징 헬스 체크 중..."
          STAGING_URL="https://staging--${{ env.FIREBASE_PROJECT_ID }}.web.app"
          
          for i in {1..5}; do
            echo "헬스 체크 시도 $i/5..."
            if curl -f -s --max-time 30 "$STAGING_URL" > /dev/null; then
              echo "✅ 스테이징 배포 성공!"
              exit 0
            fi
            
            if [ $i -lt 5 ]; then
              echo "30초 후 재시도..."
              sleep 30
            fi
          done
          
          echo "❌ 스테이징 헬스 체크 실패"
          exit 1

  # 프로덕션 배포 (main 브랜치)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Load environment variables from .env
        run: |
          if [ -f .env ]; then
            export $(grep -v '^#' .env | grep -v '^$' | xargs)
            echo "FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}" >> $GITHUB_ENV
            echo "PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV
          fi
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: firebase-build-${{ github.sha }}
          path: public/
      
      # 프로덕션 환경 설정 업데이트
      - name: Update Firebase config for production
        run: |
          echo "🔧 프로덕션 환경 설정 적용 중..."
          
          # firebase.json에서 서비스 ID를 현재 프로젝트의 서비스로 변경
          PRODUCTION_SERVICE_ID="${PROJECT_ID}-graphrag-api"
          sed -i "s/\"serviceId\": \"[^\"]*\"/\"serviceId\": \"${PRODUCTION_SERVICE_ID}\"/" firebase.json
          
          echo "✅ 프로덕션 설정 완료: ${PRODUCTION_SERVICE_ID}"
      
      - name: Deploy to Firebase Hosting Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SA_KEY }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks
      
      # 프로덕션 배포 후 헬스 체크
      - name: Health check production
        run: |
          echo "🏥 프로덕션 헬스 체크 중..."
          PROD_URL="https://${{ env.FIREBASE_PROJECT_ID }}.web.app"
          
          for i in {1..10}; do
            echo "헬스 체크 시도 $i/10..."
            if curl -f -s --max-time 30 "$PROD_URL" > /dev/null; then
              echo "✅ 프로덕션 배포 성공!"
              echo "PROD_URL=$PROD_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [ $i -lt 10 ]; then
              echo "30초 후 재시도..."
              sleep 30
            fi
          done
          
          echo "❌ 프로덕션 헬스 체크 실패"
          exit 1
        id: health-check
      

  # 배포 알림
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')
    
    steps:
      - name: Determine deployment result
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "DEPLOYMENT_STATUS=success" >> $GITHUB_ENV
            echo "DEPLOYMENT_EMOJI=🎉" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_STATUS=failure" >> $GITHUB_ENV
            echo "DEPLOYMENT_EMOJI=❌" >> $GITHUB_ENV
          fi
          
          # 환경 결정
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOYMENT_ENV=Production" >> $GITHUB_ENV
            echo "DEPLOYMENT_URL=https://${{ env.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_ENV=Staging" >> $GITHUB_ENV
            echo "DEPLOYMENT_URL=https://staging--${{ env.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_ENV
          fi
      
      - name: Send Google Chat notification
        run: |
          # Google Chat 웹훅으로 알림 전송
          WEBHOOK_URL="${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}"
          
          if [ -n "$WEBHOOK_URL" ]; then
            echo "📢 Google Chat으로 배포 알림 전송 중..."
            
            # 상태에 따른 색상 설정
            if [ "${{ env.DEPLOYMENT_STATUS }}" == "success" ]; then
              CARD_COLOR="#00FF00"  # 초록색
              STATUS_TEXT="성공"
            else
              CARD_COLOR="#FF0000"  # 빨간색
              STATUS_TEXT="실패"
            fi
            
            # Google Chat 메시지 JSON 파일 생성
            cat > /tmp/firebase_payload.json << 'EOL'
            {
              "text": "Firebase Hosting 배포 STATUS_PLACEHOLDER",
              "cards": [{
                "header": {
                  "title": "GraphRAG Firebase 배포 알림",
                  "subtitle": "프론트엔드 배포 상태"
                },
                "sections": [{
                  "widgets": [
                    {
                      "keyValue": {
                        "topLabel": "배포 상태", 
                        "content": "STATUS_PLACEHOLDER",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "환경",
                        "content": "ENV_PLACEHOLDER",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "브랜치",
                        "content": "BRANCH_PLACEHOLDER", 
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "커밋",
                        "content": "COMMIT_PLACEHOLDER",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "배포 URL",
                        "content": "URL_PLACEHOLDER",
                        "contentMultiline": false
                      }
                    }
                  ]
                }]
              }]
            }
          EOL
            
            # 플레이스홀더를 실제 값으로 치환
            sed -i "s/STATUS_PLACEHOLDER/${STATUS_TEXT}/g" /tmp/firebase_payload.json
            sed -i "s/ENV_PLACEHOLDER/${{ env.DEPLOYMENT_ENV }}/g" /tmp/firebase_payload.json  
            sed -i "s/BRANCH_PLACEHOLDER/${{ github.ref_name }}/g" /tmp/firebase_payload.json
            sed -i "s/COMMIT_PLACEHOLDER/${{ github.sha }}/g" /tmp/firebase_payload.json
            sed -i "s|URL_PLACEHOLDER|${{ env.DEPLOYMENT_URL }}|g" /tmp/firebase_payload.json
            
            # 아이콘은 제거됨 (Google Chat API 호환성 문제)
            
            # Google Chat으로 전송
            curl -X POST \
              -H "Content-Type: application/json" \
              -d @/tmp/firebase_payload.json \
              "$WEBHOOK_URL"
            
            if [ $? -eq 0 ]; then
              echo "✅ Google Chat 알림 전송 성공"
            else
              echo "❌ Google Chat 알림 전송 실패"
            fi
          else
            echo "⚠️ GOOGLE_CHAT_WEBHOOK_URL이 설정되지 않았습니다"
          fi
        if: env.DEPLOYMENT_STATUS != ''
