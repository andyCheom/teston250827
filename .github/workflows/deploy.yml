# GitHub Actions - GraphRAG 백엔드 API Cloud Run 배포
name: Deploy Backend to Cloud Run

# 트리거 조건
on:
  # main 브랜치에 푸시될 때
  push:
    branches:
      - main
      - develop
    paths:
      - 'main.py'
      - 'modules/**'
      - 'prompt/**'
      - 'requirements.txt'
      - 'Dockerfile'
      - 'cloudbuild.yaml'
      - '.github/workflows/deploy.yml'
  
  # 수동 실행
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# 환경 변수 (동적으로 로드됨)
env:
  NODE_VERSION: '18'

jobs:
  # 빌드 및 배포
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    # 권한 설정
    permissions:
      contents: read
      id-token: write
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 가져오기 (태그 정보 포함)
      
      # 2. 환경변수 로드
      - name: Load environment variables from .env
        run: |
          if [ -f .env ]; then
            echo "📄 .env 파일에서 환경변수 로드 중..."
            
            # .env 파일에서 환경변수 로드 (주석과 빈 줄 제외)
            export $(grep -v '^#' .env | grep -v '^$' | xargs)
            
            # GitHub Actions 환경변수로 설정
            echo "PROJECT_ID=${PROJECT_ID}" >> $GITHUB_ENV
            echo "REGION=${LOCATION_ID}" >> $GITHUB_ENV
            echo "SERVICE_NAME=${PROJECT_ID}-graphrag-api" >> $GITHUB_ENV
            echo "FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}" >> $GITHUB_ENV
            echo "SERVICE_ACCOUNT_EMAIL=${SERVICE_ACCOUNT_EMAIL}" >> $GITHUB_ENV
            echo "DISCOVERY_ENGINE_ID=${DISCOVERY_ENGINE_ID}" >> $GITHUB_ENV
            echo "DATASTORE_ID=${DATASTORE_ID}" >> $GITHUB_ENV
            
            echo "✅ 환경변수 로드 완료:"
            echo "  PROJECT_ID: ${PROJECT_ID}"
            echo "  REGION: ${LOCATION_ID}"
            echo "  SERVICE_NAME: ${PROJECT_ID}-graphrag-api"
          else
            echo "❌ .env 파일을 찾을 수 없습니다"
            exit 1
          fi
      
      # 3. Google Cloud 인증
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      # 4. Cloud SDK 설정
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      # 5. Artifact Registry 인증
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      # 6. 환경별 변수 설정
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
          
          # 짧은 커밋 SHA 생성
          echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
          
          echo "✅ 환경 설정 완료: ${{ github.ref_name }} → ${ENVIRONMENT:-staging}"
      
          
      # 7. 종속성 캐시
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # 8. Cloud Build 실행
      - name: Run Cloud Build
        run: |
          gcloud builds submit             --config=cloudbuild.yaml             --substitutions=_SERVICE_NAME=${{ env.SERVICE_NAME }},SHORT_SHA=${{ env.SHORT_SHA }}             --timeout=1200s
      
      # 9. 배포 결과 확인
      - name: Verify deployment
        run: |
          echo "🔍 배포 상태 확인 중..."
          
          # 서비스 URL 가져오기
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "서비스 URL: $SERVICE_URL"
          
          # 헬스 체크 (빠른 기본 헬스 체크 먼저)
          for i in {1..10}; do
            echo "헬스 체크 시도 $i/10..."
            if timeout 15 curl -f -s --connect-timeout 5 --max-time 10 "$SERVICE_URL/api/health" > /dev/null; then
              echo "✅ 기본 헬스 체크 성공!"
              
              # 상세 헬스 체크도 수행
              echo "🔍 상세 헬스 체크 진행..."
              if timeout 20 curl -f -s --connect-timeout 5 --max-time 15 "$SERVICE_URL/api/health/detailed" > /dev/null; then
                echo "✅ 상세 헬스 체크도 성공!"
              else
                echo "⚠️ 상세 헬스 체크 실패 (기본 헬스는 정상)"
              fi
              
              echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [ $i -lt 10 ]; then
              echo "15초 후 재시도..."
              sleep 15
            fi
          done
          
          echo "❌ 배포 검증 실패"
          exit 1
      
      # 10. Google Chat 알림 (성공)
      - name: Notify success to Google Chat
        if: success()
        run: |
          WEBHOOK_URL="${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}"
          
          if [ -n "$WEBHOOK_URL" ]; then
            echo "📢 Google Chat으로 배포 성공 알림 전송 중..."
            
            # 서비스 URL 가져오기
            SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
              --region=${{ env.REGION }} \
              --format="value(status.url)" 2>/dev/null || echo "URL 조회 실패")
            
            # Google Chat 메시지 페이로드 생성
            PAYLOAD=$(cat <<EOF
            {
              "text": "🎉 *GraphRAG API 배포 성공!*",
              "cards": [{
                "header": {
                  "title": "GraphRAG 백엔드 배포 알림",
                  "subtitle": "Cloud Run 배포 완료"
                },
                "sections": [{
                  "widgets": [
                    {
                      "keyValue": {
                        "topLabel": "배포 상태",
                        "content": "✅ 성공",
                        "contentMultiline": false,
                        "icon": "CHECK_CIRCLE"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "환경",
                        "content": "${{ env.ENVIRONMENT }}",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "브랜치",
                        "content": "${{ github.ref_name }}",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "커밋",
                        "content": "${{ env.SHORT_SHA }}",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "서비스 URL",
                        "content": "${SERVICE_URL}",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "서비스명",
                        "content": "${{ env.SERVICE_NAME }}",
                        "contentMultiline": false
                      }
                    }
                  ]
                }],
                "cardActions": [
                  {
                    "actionLabel": "API 헬스 체크",
                    "onClick": {
                      "openLink": {
                        "url": "${SERVICE_URL}/api/health"
                      }
                    }
                  },
                  {
                    "actionLabel": "워크플로우 보기",
                    "onClick": {
                      "openLink": {
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    }
                  }
                ]
              }]
            }
          EOF
            )
            
            # Google Chat으로 전송
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "$WEBHOOK_URL"
            
            if [ $? -eq 0 ]; then
              echo "✅ Google Chat 성공 알림 전송 완료"
            else
              echo "❌ Google Chat 성공 알림 전송 실패"
            fi
          else
            echo "⚠️ GOOGLE_CHAT_WEBHOOK_URL이 설정되지 않았습니다"
          fi
      
      # 11. Google Chat 알림 (실패)
      - name: Notify failure to Google Chat
        if: failure()
        run: |
          WEBHOOK_URL="${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}"
          
          if [ -n "$WEBHOOK_URL" ]; then
            echo "📢 Google Chat으로 배포 실패 알림 전송 중..."
            
            # Google Chat 메시지 페이로드 생성
            PAYLOAD=$(cat <<EOF
            {
              "text": "❌ *GraphRAG API 배포 실패*",
              "cards": [{
                "header": {
                  "title": "GraphRAG 백엔드 배포 알림",
                  "subtitle": "Cloud Run 배포 실패"
                },
                "sections": [{
                  "widgets": [
                    {
                      "keyValue": {
                        "topLabel": "배포 상태",
                        "content": "❌ 실패",
                        "contentMultiline": false,
                        "icon": "ERROR"
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "환경",
                        "content": "${{ env.ENVIRONMENT }}",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "브랜치",
                        "content": "${{ github.ref_name }}",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "커밋",
                        "content": "${{ env.SHORT_SHA }}",
                        "contentMultiline": false
                      }
                    },
                    {
                      "keyValue": {
                        "topLabel": "서비스명",
                        "content": "${{ env.SERVICE_NAME }}",
                        "contentMultiline": false
                      }
                    }
                  ]
                }],
                "cardActions": [{
                  "actionLabel": "로그 보기",
                  "onClick": {
                    "openLink": {
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  }
                }]
              }]
            }
          EOF
            )
            
            # Google Chat으로 전송
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "$WEBHOOK_URL"
            
            if [ $? -eq 0 ]; then
              echo "✅ Google Chat 실패 알림 전송 완료"
            else
              echo "❌ Google Chat 실패 알림 전송 실패"
            fi
          else
            echo "⚠️ GOOGLE_CHAT_WEBHOOK_URL이 설정되지 않았습니다"
          fi

  # # 보안 스캔 (별도 잡)
  # security-scan:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: always() && (needs.deploy.result == 'success')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     # 환경 변수 설정 (deploy job과 동일)
  #     - name: Set environment variables
  #       run: |
  #         if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event.inputs.environment }}" == "production" ]]; then
  #           echo "ENVIRONMENT=production" >> $GITHUB_ENV
  #           echo "SERVICE_NAME=graphrag-api" >> $GITHUB_ENV
  #         else
  #           echo "ENVIRONMENT=staging" >> $GITHUB_ENV
  #           echo "SERVICE_NAME=testing0724" >> $GITHUB_ENV
  #         fi
          
  #         # 짧은 커밋 SHA 생성
  #         echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
      
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: 'asia-northeast3-docker.pkg.dev/${{ env.PROJECT_ID }}/trialanderror0724/${{ env.SERVICE_NAME }}:${{ env.SHORT_SHA }}'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #       continue-on-error: true
      
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always() && hashFiles('trivy-results.sarif') != ''
  #       with:
  #         sarif_file: 'trivy-results.sarif'