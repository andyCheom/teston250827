steps:
# 1. Docker 이미지 빌드
- name: 'gcr.io/cloud-builders/docker'
  id: build-image
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 1. Docker 이미지 빌드를 시작합니다..."
      docker build -t "${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}" -t "${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest" .
      echo "✅ 1. Docker 이미지 빌드 완료"

# 2. Docker 이미지 푸시
- name: 'gcr.io/cloud-builders/docker'
  id: push-image
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 2. 이미지를 Artifact Registry에 푸시합니다..."
      docker push "${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}" --all-tags
      echo "✅ 2. 이미지 푸시 완료"
  waitFor:
    - build-image

# 3. 블루그린 배포: 새 버전을 별도 서비스로 배포 (트래픽 0%)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: deploy-green-service
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 3. 블루그린 배포 - Green 버전 배포를 시작합니다..."
      GREEN_SERVICE_NAME="${_SERVICE_NAME}-green-${SHORT_SHA}"
      echo "Green 서비스명: $$GREEN_SERVICE_NAME"
      echo "이미지: ${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}"
      
      # Green 서비스 배포
      gcloud run deploy "$$GREEN_SERVICE_NAME" \
        --image="${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}" \
        --region="${_REGION}" \
        --platform=managed \
        --allow-unauthenticated \
        --service-account="${_SERVICE_ACCOUNT}" \
        --min-instances="${_MIN_INSTANCES}" \
        --max-instances="${_MAX_INSTANCES}" \
        --cpu="${_CPU}" \
        --memory="${_MEMORY}" \
        --timeout="${_TIMEOUT}" \
        --set-env-vars="PROJECT_ID=${_PROJECT_ID},LOCATION_ID=${_LOCATION_ID},MODEL_ID=${_MODEL_ID},DATASTORE_ID=${_DATASTORE_ID},DATASTORE_LOCATION=${_DATASTORE_LOCATION},DISCOVERY_ENGINE_ID=${_DISCOVERY_ENGINE_ID},DISCOVERY_LOCATION=${_DISCOVERY_LOCATION},DISCOVERY_COLLECTION=default_collection,DISCOVERY_SERVING_CONFIG=default_config,SYSTEM_PROMPT_PATH=prompt/prompt.txt,USE_SECRET_MANAGER=True,SERVE_STATIC=false"
      
      # 배포 성공 확인
      if gcloud run services describe "$$GREEN_SERVICE_NAME" --region=${_REGION} >/dev/null 2>&1; then
        echo "✅ 3. Green 버전 배포 완료: $$GREEN_SERVICE_NAME"
        GREEN_URL=$$(gcloud run services describe "$$GREEN_SERVICE_NAME" --region=${_REGION} --format="value(status.url)")
        echo "Green 서비스 URL: $$GREEN_URL"
      else
        echo "❌ Green 서비스 배포 실패"
        exit 1
      fi
  waitFor:
    - push-image

# 4. Green 버전 헬스 체크
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: health-check-green
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 4. Green 버전 헬스 체크를 시작합니다..."
      GREEN_SERVICE_NAME="${_SERVICE_NAME}-green-${SHORT_SHA}"
      echo "Green 서비스명: $$GREEN_SERVICE_NAME"
      
      # Green 서비스 배포 완료 대기
      echo "Green 서비스 준비 상태 확인 중..."
      for wait_i in $$(seq 1 10); do
        if gcloud run services describe "$$GREEN_SERVICE_NAME" --region=${_REGION} >/dev/null 2>&1; then
          echo "✅ Green 서비스 발견됨"
          break
        else
          echo "... Green 서비스 대기 중 ($$wait_i/10)"
          sleep 5
        fi
        if [ $$wait_i -eq 10 ]; then
          echo "❌ Green 서비스를 찾을 수 없습니다."
          echo "서비스 목록 확인:"
          gcloud run services list --region=${_REGION} --filter="metadata.name:$$GREEN_SERVICE_NAME"
          exit 1
        fi
      done
      
      # Green 서비스 URL 가져오기 (여러 방법 시도)
      echo "Green 서비스 URL 가져오기 시도..."
      
      # 방법 1: 기본 서비스 URL
      GREEN_URL=$$(gcloud run services describe "$$GREEN_SERVICE_NAME" --region=${_REGION} --format="value(status.url)" 2>/dev/null)
      
      if [ -z "$$GREEN_URL" ]; then
        echo "방법 1 실패, 방법 2 시도 중..."
        # 방법 2: traffic 정보에서 URL 추출
        GREEN_URL=$$(gcloud run services describe "$$GREEN_SERVICE_NAME" --region=${_REGION} --format="value(status.traffic[0].url)" 2>/dev/null)
      fi
      
      if [ -z "$$GREEN_URL" ]; then
        echo "❌ Green 서비스 URL을 가져올 수 없습니다."
        echo "서비스 상세 정보:"
        gcloud run services describe "$$GREEN_SERVICE_NAME" --region=${_REGION}
        exit 1
      fi
      
      echo "Green 서비스 URL: $$GREEN_URL"
      
      # 헬스 체크 수행
      for i in $$(seq 1 12); do
        echo "... Green 버전 헬스 체크 시도 $$i/12 ..."
        STATUS_CODE=$$(curl -o /dev/null -s -w "%{http_code}" --connect-timeout 5 --max-time 10 "$$GREEN_URL/api/health")
        if [ "$$STATUS_CODE" = "200" ]; then
          echo "✅ Green 버전 헬스 체크 성공! (상태 코드: $$STATUS_CODE)"
          break
        else
          echo "... 실패 (상태 코드: $$STATUS_CODE)"
        fi
        if [ $$i -lt 12 ]; then
          echo "... 10초 후 재시도 ..."
          sleep 10
        else
          echo "❌ Green 버전 헬스 체크 최종 실패."
          exit 1
        fi
      done
  waitFor:
    - deploy-green-service

# 5. 트래픽 전환 (Blue → Green)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: switch-traffic
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 5. 트래픽 전환을 시작합니다..."
      GREEN_SERVICE_NAME="${_SERVICE_NAME}-green-${SHORT_SHA}"
      
      # 기존 메인 서비스가 있는지 확인
      if gcloud run services describe "${_SERVICE_NAME}" --region=${_REGION} >/dev/null 2>&1; then
        echo "기존 Blue 서비스 발견: ${_SERVICE_NAME}"
        BLUE_EXISTS="true"
      else
        echo "기존 서비스 없음 - 첫 배포입니다."
        BLUE_EXISTS="false"
      fi
      
      # Green을 메인 서비스로 승격 (Green 이미지로 메인 서비스 업데이트)
      echo "Green 서비스를 메인 서비스로 승격 중..."
      if [ "$$BLUE_EXISTS" = "true" ]; then
        # 기존 메인 서비스를 Green 이미지로 업데이트
        echo "기존 메인 서비스를 Green 이미지로 업데이트 중..."
        gcloud run deploy "${_SERVICE_NAME}" \
          --image="${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}" \
          --region="${_REGION}" \
          --platform=managed \
          --allow-unauthenticated \
          --service-account="${_SERVICE_ACCOUNT}" \
          --min-instances="${_MIN_INSTANCES}" \
          --max-instances="${_MAX_INSTANCES}" \
          --cpu="${_CPU}" \
          --memory="${_MEMORY}" \
          --timeout="${_TIMEOUT}" \
          --set-env-vars="PROJECT_ID=${_PROJECT_ID},LOCATION_ID=${_LOCATION_ID},MODEL_ID=${_MODEL_ID},DATASTORE_ID=${_DATASTORE_ID},DATASTORE_LOCATION=${_DATASTORE_LOCATION},DISCOVERY_ENGINE_ID=${_DISCOVERY_ENGINE_ID},DISCOVERY_LOCATION=${_DISCOVERY_LOCATION},DISCOVERY_COLLECTION=default_collection,DISCOVERY_SERVING_CONFIG=default_config,SYSTEM_PROMPT_PATH=prompt/prompt.txt,USE_SECRET_MANAGER=True,SERVE_STATIC=false"
      else
        # 메인 서비스가 없으면 새로 생성
        echo "메인 서비스 생성 중..."
        gcloud run deploy "${_SERVICE_NAME}" \
          --image="${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}" \
          --region="${_REGION}" \
          --platform=managed \
          --allow-unauthenticated \
          --service-account="${_SERVICE_ACCOUNT}" \
          --min-instances="${_MIN_INSTANCES}" \
          --max-instances="${_MAX_INSTANCES}" \
          --cpu="${_CPU}" \
          --memory="${_MEMORY}" \
          --timeout="${_TIMEOUT}" \
          --set-env-vars="PROJECT_ID=${_PROJECT_ID},LOCATION_ID=${_LOCATION_ID},MODEL_ID=${_MODEL_ID},DATASTORE_ID=${_DATASTORE_ID},DATASTORE_LOCATION=${_DATASTORE_LOCATION},DISCOVERY_ENGINE_ID=${_DISCOVERY_ENGINE_ID},DISCOVERY_LOCATION=${_DISCOVERY_LOCATION},DISCOVERY_COLLECTION=default_collection,DISCOVERY_SERVING_CONFIG=default_config,SYSTEM_PROMPT_PATH=prompt/prompt.txt,USE_SECRET_MANAGER=True,SERVE_STATIC=false"
      fi
      
      # 최종 헬스 체크 (메인 서비스)
      echo "메인 서비스 최종 헬스 체크..."
      MAIN_URL=$$(gcloud run services describe "${_SERVICE_NAME}" --region=${_REGION} --format="value(status.url)")
      STATUS_CODE=$$(curl -o /dev/null -s -w "%{http_code}" --connect-timeout 5 --max-time 10 "$$MAIN_URL/api/health")
      
      if [ "$$STATUS_CODE" = "200" ]; then
        echo "✅ 트래픽 전환 성공! 메인 서비스 URL: $$MAIN_URL"
      else
        echo "❌ 메인 서비스 헬스 체크 실패"
        exit 1
      fi
  waitFor:
    - health-check-green

# 6. 정리 작업 (Green 서비스 삭제)
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: cleanup-green
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "🚀 6. Green 서비스 정리 작업을 시작합니다..."
      GREEN_SERVICE_NAME="${_SERVICE_NAME}-green-${SHORT_SHA}"
      
      # Green 서비스 삭제 (메인 서비스로 승격했으므로 불필요)
      echo "임시 Green 서비스 삭제 중: $$GREEN_SERVICE_NAME"
      gcloud run services delete "$$GREEN_SERVICE_NAME" --region=${_REGION} --quiet || echo "Green 서비스 삭제 실패 (무시)"
      
      echo "✅ 정리 작업 완료"
  waitFor:
    - switch-traffic

# 빌드된 이미지 정보
images:
  - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:${SHORT_SHA}'
  - '${_ARTIFACT_REGISTRY}/${_PROJECT_ID}/${_REPO_NAME}/${_SERVICE_NAME}:latest'

# 빌드 옵션
options:
  logging: CLOUD_LOGGING_ONLY

# 서비스 계정
serviceAccount: 'projects/${_PROJECT_ID}/serviceAccounts/${_SERVICE_ACCOUNT}'

# 치환 변수 기본값
substitutions:
  _PROJECT_ID: teston250827
  _REGION: asia-northeast3
  _LOCATION_ID: asia-northeast3
  _SERVICE_NAME: teston250827-graphrag-api
  _REPO_NAME: teston250827-graphrag-repo
  _SERVICE_ACCOUNT: graphrag-service@teston250827.iam.gserviceaccount.com
  _ARTIFACT_REGISTRY: asia-northeast3-docker.pkg.dev
  _DATASTORE_ID: teston250827-graphrag-datastore
  _DATASTORE_LOCATION: global
  _DISCOVERY_ENGINE_ID: teston250827-graphrag-engine
  _DISCOVERY_LOCATION: global
  _MIN_INSTANCES: '0'
  _MAX_INSTANCES: '10'
  _CPU: '1'
  _MEMORY: 2Gi
  _TIMEOUT: 300s
  _MODEL_ID: gemini-pro
